class MouseMaster : ZilchComponent
{
  sends CurrentFactorChanged : FactorEvent;
  
  
  var CurrentFactor : Integer = 2;
  
  var MinFactor : Integer = 2;
  var MaxFactor : Integer = 10000;
  
  var Primes : Array[Integer];
  var PrimeIndex : Integer = 0;
  
  
  function Initialize(init : CogInitializer)
  {
    this.Primes = this.GameSession.PrimeGenerator.Primes;
    
    Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
    Zero.Connect(this.Space, Events.LeftMouseDown, this.OnLeftMouseDown);
    Zero.Connect(this.Space, Events.RightMouseDown, this.OnRightMouseDown);
  }
  
  
  function OnLeftMouseDown(event : ViewportMouseEvent)
  {
    var hitObject = event.HitObject;
    
    if (hitObject == null) return;
    
    var ne = NumberEvent();
    ne.Divisor = this.CurrentFactor;
    hitObject.DispatchEvent(Events.DivisionAttempt, ne);
  }
  
  
  function OnRightMouseDown(event : ViewportMouseEvent)
  {
    var hitObject = event.HitObject;
    
    if (hitObject == null) return;
    
    hitObject.DispatchEvent(Events.PrimeAttempt, NumberEvent());
  }
  
  
  function OnMouseScroll(event : ViewportMouseEvent)
  {
    var oldFactor = this.CurrentFactor;
    
    var shift = event.ShiftPressed;
    var ctrl = event.CtrlPressed;
    
    if      (!shift && !ctrl)
    {
      this.PrimeIndex +=    1 * event.Scroll.Y as Integer;
    }
    else if (shift && !ctrl)
    {
      this.PrimeIndex +=   10 * event.Scroll.Y as Integer;
    }
    else if (!shift && ctrl)
    {
      this.PrimeIndex +=  100 * event.Scroll.Y as Integer;
    }
    else // (shift && ctrl)
    {
      this.PrimeIndex += 1000 * event.Scroll.Y as Integer;
    }
    
    this.PrimeIndex = Math.Clamp(this.PrimeIndex, 0, this.Primes.LastIndex);
    this.CurrentFactor = this.Primes[this.PrimeIndex];
    var newFactor = this.CurrentFactor;
    
    if (newFactor != oldFactor)
    {
      var fe = FactorEvent();
      fe.NewFactor = newFactor;
      fe.OldFactor = oldFactor;
      this.GameSession.DispatchEvent(Events.CurrentFactorChanged, fe);
    }
  }
}


class FactorEvent : ZilchEvent
{
  var NewFactor : Integer;
  var OldFactor : Integer;
}
