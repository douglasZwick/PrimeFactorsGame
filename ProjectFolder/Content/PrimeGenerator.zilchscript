class PrimeGenerator : ZilchComponent
{
  [Property]
  var Max : Integer = 99;
  [Property]
  var LogGenerationToConsole : Boolean = false;
  [Property]
  var OutputFormat : PrimeOutputFormat = PrimeOutputFormat.Binary;
  
  var Primes : Array[Integer] = Array[Integer]()
  {
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
  };
  
  
  [Display]
  function Generate()
  {
    this.WriteBinaryArrayToFile();
    
    //timeout (300)
    //{
    //  this.BuildArray();
      
    //  if (this.OutputFormat == PrimeOutputFormat.Zilch)
    //    this.WriteZilchArrayToFile();
      
    //  Console.WriteLine("`this.Primes.Count` primes generated");
    //}
  }
  
  
  function BuildArray()
  {
    var fileStream : FileStream = null;
    
    if (this.OutputFormat == PrimeOutputFormat.Binary)
    {
      fileStream = FileStream("`FilePath.UserDocumentsDirectory`Prime Array.binaryData", FileMode.Write);
      
    }
    
    // "prime" the array hahahahahahahahahaha
    this.Primes = Array[Integer]() { 2, 3, 5, };
    
    // the currentCandidate starts just past the end of our current array.
    // of course no even number is prime, so we can add two instead of adding one
    for (var currentCandidate = this.Primes[this.Primes.LastIndex] + 2; currentCandidate <= this.Max; currentCandidate += 2)
    {
      this.Log("Considering `currentCandidate`:");
      // you only need to go as far as the currentCandidate's square root. the current quotient
      // converges on this as we go, so we never actually have to call Math.Sqrt
      var currentSqrt = Integer.PositiveMax;
      var isPrime = false;
      
      // check each prime we have in the array so far
      for (var primeIndex = 1; primeIndex < this.Primes.Count; ++primeIndex)
      {
        var prime = this.Primes[primeIndex];
        
        this.Log("  Comparing to `prime`.");
        
        // if it's greater than our latest quotient, aka our currentSqrt,
        if (prime > currentSqrt)
        {
          this.Log("    `prime` is greater than `currentSqrt`, so we're done comparing.");
          // then we're done and it's prime
          isPrime = true;
          break;
        }
        
        var remainder = currentCandidate % prime;
        
        this.Log("    `currentCandidate` % `prime` == `remainder`");
        // if the currentCandidate is divisible by anything, then it's not prime,
        // but we only need to check primes, so that saves time
        if (remainder == 0)
        {
          this.Log("      `currentCandidate` is divisible by `prime`, so it's not prime.");
          break;
        }
        else
        {
          currentSqrt = currentCandidate / prime;
          this.Log("      `currentCandidate` is not divisible by `prime`. The new currentSqrt is `currentSqrt`.");
        }
      }
      
      if (isPrime)
      {
        this.Log("  `currentCandidate` is prime.");
        this.Primes.Add(currentCandidate);
      }
    }
    
    if (this.OutputFormat == PrimeOutputFormat.Binary)
    {
      fileStream.Close();
    }
  }
  
  
  function WriteBinaryArrayToFile()
  {
    var fileStream = FileStream("`FilePath.UserDocumentsDirectory`Test File.binaryData", FileMode.Write);
    
    this.WriteInteger(10, fileStream);
    this.WriteInteger(13, fileStream);
    
    fileStream.Close();
    
    var readStream = FileStream("`FilePath.UserDocumentsDirectory`Test File.binaryData", FileMode.Read);
    Console.WriteLine(this.ReadInteger(readStream));
    Console.WriteLine(this.ReadInteger(readStream));
    readStream.Close();
  }
  
  
  function WriteZilchArrayToFile()
  {
    var fileStream = FileStream("`FilePath.UserDocumentsDirectory`Prime Array.txt", FileMode.Write);
    
    fileStream.WriteText("  var Primes : Array[Integer] = Array[Integer]()\n");
    fileStream.WriteText("  {\n");
    
    var maxWidth = 80;
    var currentLine = StringBuilder();
    var indentationString = "    ";
    currentLine.Write(indentationString);
    fileStream.WriteText(indentationString);
    var currentLineWidth = 0;
    
    foreach (var prime in this.Primes)
    {
      currentLineWidth = currentLine.ToString().ByteCount;
      var currentPrimeString = "`prime`, ";
      var currentPrimeWidth = currentPrimeString.ByteCount;
      
      if (currentLineWidth + currentPrimeWidth > maxWidth)
      {
        currentLine = StringBuilder();
        currentLine.Write(indentationString);
        fileStream.WriteText("\n`indentationString`");
      }
      
      currentLine.Write(currentPrimeString);
      fileStream.WriteText(currentPrimeString);
    }
    
    fileStream.WriteText("\n  };\n");
    
    fileStream.Close();
  }
  
  
  function Log(message : any)
  {
    if (this.LogGenerationToConsole) Console.WriteLine(message);
  }
  
  
  function WriteInteger(value : Integer, stream : FileStream)
  {
    var mask0 = 255 << 24;  // 0xff000000
    var mask1 = 255 << 16;  // 0x00ff0000
    var mask2 = 255 <<  8;  // 0x0000ff00
    var mask3 = 255 <<  0;  // 0x000000ff
    var byte0 = ((value & mask0) >> 24) as Byte;
    var byte1 = ((value & mask1) >> 16) as Byte;
    var byte2 = ((value & mask2) >>  8) as Byte;
    var byte3 = ((value & mask3) >>  0) as Byte;
    stream.WriteByte(byte0);
    stream.WriteByte(byte1);
    stream.WriteByte(byte2);
    stream.WriteByte(byte3);
  }
  
  
  function ReadInteger(stream : FileStream) : Integer
  {
    var byte0 = stream.ReadByte();
    var byte1 = stream.ReadByte();
    var byte2 = stream.ReadByte();
    var byte3 = stream.ReadByte();
    var part0 = byte0 << 24;
    var part1 = byte1 << 16;
    var part2 = byte2 <<  8;
    var part3 = byte3 <<  0;
    return part0 | part1 | part2 | part3;
  }
}


enum PrimeOutputFormat
{
  Binary,
  Zilch,
}
