class PrimeGenerator : ZilchComponent
{
  [Property]
  var Max : Integer = 99;
  [Property]
  var LogGenerationToConsole : Boolean = false;
  [Property]
  var OutputFormat : PrimeOutputFormat = PrimeOutputFormat.Binary;
  [Property]
  var OutputFileName : String = "Prime Array";
  [Property]
  var BinaryExtension : String = ".binaryData";
  [Property]
  var ZilchExtension : String = ".txt";
  
  var PatienceCutoff : Integer = 9999;
  
  
  function Initialize(init : CogInitializer)
  {
    if (this.Primes == null)
    {
      if (this.OutputFormat == PrimeOutputFormat.Binary)
      {
        this.ReadBinaryArrayFromFile();
      }
      else
      {
        if (this.Max <= this.PatienceCutoff)
          this.Generate();
        else
          throw Exception("Screw that!");
      }
    }
  }
  
  
  [Display]
  function Generate()
  {
    timeout (300)
    {
      this.BuildArray();
      
      if (this.OutputFormat == PrimeOutputFormat.Zilch)
        this.WriteZilchArrayToFile();
      
      Console.WriteLine("`this.Primes.Count` primes generated");
    }
  }
  
  
  function BuildArray()
  {
    // "prime" the array hahahahahahahahahaha
    this.Primes = Array[Integer]() { 2, 3, 5, };
    
    var fileStream : FileStream = null;
    
    if (this.OutputFormat == PrimeOutputFormat.Binary)
    {
      fileStream = FileStream("`FilePath.UserDocumentsDirectory``this.OutputFileName``this.BinaryExtension`", FileMode.Write);
      
      foreach (var prime in this.Primes)
        fileStream.WriteInteger(prime);
    }
    
    // the currentCandidate starts just past the end of our current array.
    // of course no even number is prime, so we can add two instead of adding one
    for (var currentCandidate = this.Primes[this.Primes.LastIndex] + 2; currentCandidate <= this.Max; currentCandidate += 2)
    {
      this.Log("Considering `currentCandidate`:");
      // you only need to go as far as the currentCandidate's square root. the current quotient
      // converges on this as we go, so we never actually have to call Math.Sqrt
      var currentSqrt = Integer.PositiveMax;
      var isPrime = false;
      
      // check each prime we have in the array so far
      for (var primeIndex = 1; primeIndex < this.Primes.Count; ++primeIndex)
      {
        var prime = this.Primes[primeIndex];
        
        this.Log("  Comparing to `prime`.");
        
        // if it's greater than our latest quotient, aka our currentSqrt,
        if (prime > currentSqrt)
        {
          this.Log("    `prime` is greater than `currentSqrt`, so we're done comparing.");
          // then we're done and it's prime
          isPrime = true;
          break;
        }
        
        var remainder = currentCandidate % prime;
        
        this.Log("    `currentCandidate` % `prime` == `remainder`");
        // if the currentCandidate is divisible by anything, then it's not prime,
        // but we only need to check primes, so that saves time
        if (remainder == 0)
        {
          this.Log("      `currentCandidate` is divisible by `prime`, so it's not prime.");
          break;
        }
        else
        {
          currentSqrt = currentCandidate / prime;
          this.Log("      `currentCandidate` is not divisible by `prime`. The new currentSqrt is `currentSqrt`.");
        }
      }
      
      if (isPrime)
      {
        this.Log("  `currentCandidate` is prime.");
        this.Primes.Add(currentCandidate);
        
        if (this.OutputFormat == PrimeOutputFormat.Binary)
          fileStream.WriteInteger(currentCandidate);
      }
    }
    
    if (this.OutputFormat == PrimeOutputFormat.Binary)
    {
      fileStream.Close();
    }
  }
  
  
  function WriteZilchArrayToFile()
  {
    var fileStream = FileStream("`FilePath.UserDocumentsDirectory``this.OutputFileName``this.ZilchExtension`", FileMode.Write);
    
    fileStream.WriteText("  var Primes : Array[Integer] = Array[Integer]()\n");
    fileStream.WriteText("  {\n");
    
    var maxWidth = 80;
    var currentLine = StringBuilder();
    var indentationString = "    ";
    currentLine.Write(indentationString);
    fileStream.WriteText(indentationString);
    var currentLineWidth = 0;
    
    foreach (var prime in this.Primes)
    {
      currentLineWidth = currentLine.ToString().ByteCount;
      var currentPrimeString = "`prime`, ";
      var currentPrimeWidth = currentPrimeString.ByteCount;
      
      if (currentLineWidth + currentPrimeWidth > maxWidth)
      {
        currentLine = StringBuilder();
        currentLine.Write(indentationString);
        fileStream.WriteText("\n`indentationString`");
      }
      
      currentLine.Write(currentPrimeString);
      fileStream.WriteText(currentPrimeString);
    }
    
    fileStream.WriteText("\n  };\n");
    
    fileStream.Close();
  }
  
  
  function ReadBinaryArrayFromFile()
  {
    // TODO:
    // 
    // make this take multiple frames, so that i can have a loading icon or something
    
    var fileStream = FileStream("`FilePath.UserDocumentsDirectory``this.OutputFileName``this.BinaryExtension`", FileMode.Read);
    
    if (fileStream == null)
    {
      if (this.Max <= this.PatienceCutoff)
      {
        this.Generate();
        
        return;
      }
      else
      {
        throw Exception("Screw that!");
      }
    }
    
    this.Primes = Array[Integer]();
    
    var primeCount = fileStream.Count / 4;
    
    for (var i = 0; i < primeCount; ++i)
      this.Primes.Add(fileStream.ReadInteger());
    
    Console.WriteLine("`primeCount` primes read");
    
    fileStream.Close();
  }
  
  
  function Log(message : any)
  {
    if (this.LogGenerationToConsole) Console.WriteLine(message);
  }
  
  
  var Primes : Array[Integer];
}


enum PrimeOutputFormat
{
  Binary,
  Zilch,
}
